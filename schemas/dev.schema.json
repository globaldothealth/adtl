{
  "$schema": "https://json-schema.org/draft-04/schema",
  "id": "https://raw.githubusercontent.com/globaldothealth/adtl/main/schemas/dev.schema.json",
  "title": "adtl",
  "description": "Another Data Transformation Language (adtl) parser file",
  "required": [
    "adtl"
  ],
  "definitions": {
    "fieldMapping": {
      "oneOf": [
        {
          "type": "string",
          "description": "A constant mapping"
        },
        {
          "type": "object",
          "required": [
            "field"
          ],
          "properties": {
            "field": {
              "type": "string",
              "description": "Corresponding field name in source file"
            },
            "fieldPattern": {
              "type": "string",
              "description": "This is only used with combinedType, specifies a regular expression matching multiple fields"
            },
            "sensitive": {
              "type": "boolean",
              "description": "Indicates to the parser whether the field is sensitive. Usually a sensitive field is hashed or encrypted before storing in the database.",
              "default": false
            },
            "description": {
              "type": "string",
              "description": "Description of the source field, usually from an underlying data dictionary"
            },
            "source_unit": {
              "$ref": "#/definitions/fieldMapping",
              "description": "Specifies unit of the field in the source file"
            },
            "unit": {
              "type": "string",
              "description": "Specifies the unit that source_unit should be converted to. Both source_unit and unit take unit names from the pint Python library"
            },
            "source_date": {
              "type": "string",
              "description": "Source date format, specified in strftime(3) format"
            },
            "date": {
              "type": "string",
              "description": "Date format to convert source_date format to, specified in strftime(3) format",
              "default": "%Y-%m-%d"
            },
            "apply": {
              "additionalProperties": false,
              "type": "object",
              "required": [
                "function"
              ],
              "properties": {
                "function": {
                  "type": "string",
                  "description": "Function to apply (defined in adtl.transformations)"
                },
                "params": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Additional parameters to pass to the function"
                }
              }
            },
            "values": {
              "type": "object",
              "patternProperties": {
                ".*": {
                  "type": [
                    "string",
                    "boolean",
                    "number"
                  ]
                }
              }
            }
          }
        }
      ]
    }
  },
  "properties": {
    "adtl": {
      "type": "object",
      "required": [
        "name",
        "description",
        "tables"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the parser"
        },
        "description": {
          "type": "string",
          "description": "Description of the parser"
        },
        "defs": {
          "type": "object",
          "description": "Re-usable definitions"
        },
        "tables": {
          "type": "object",
          "patternProperties": {
            ".*": {
              "type": "object",
              "required": [
                "kind"
              ],
              "x-taplo": {
                "initKeys": [
                  "kind"
                ]
              },
              "properties": {
                "kind": {
                  "enum": [
                    "constant",
                    "groupBy",
                    "oneToMany",
                    "oneToOne"
                  ],
                  "x-taplo": {
                    "docs": {
                      "enumValues": [
                        "No mapping, table is composed of a single row of (key, value) pairs",
                        "Table is grouped by the groupBy key",
                        "Multiple rows are generated from each row in the source file",
                        "One-to-one mapping between a row in the source and a row in the transformed file"
                      ]
                    }
                  },
                  "description": "Whether the mapping from the source data file is constant, many-to-one (grouped), one-to-one or one-to-many"
                },
                "groupBy": {
                  "type": "string",
                  "description": "Attribute to group by"
                },
                "aggregation": {
                  "enum": [
                    "lastNotNull"
                  ],
                  "description": "How to aggregate when doing the group by operation. The only supported option is lastNotNull, which keeps the last non-null value"
                },
                "schema": {
                  "type": "string",
                  "description": "JSON Schema to use for parser validation"
                }
              }
            }
          }
        }
      }
    }
  },
  "patternProperties": {
    "^(?!adtl).*$": {
      "patternProperties": {
        ".*": {
          "oneOf": [
            {
              "$ref": "#/definitions/fieldMapping"
            },
            {
              "type": "object",
              "description": "Combined type",
              "required": [
                "combinedType",
                "fields"
              ],
              "properties": {
                "description": {
                  "type": "string"
                },
                "combinedType": {
                  "enum": [
                    "list",
                    "any",
                    "all",
                    "firstNonNull"
                  ],
                  "description": "Specifies a combined type using of the supported combinations"
                },
                "fields": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/fieldMapping"
                  },
                  "description": "List of fields to be combined"
                },
                "excludeWhen": {
                  "oneOf": [
                    {
                      "enum": [
                        "none",
                        "false-like"
                      ]
                    },
                    {
                      "type": "array"
                    }
                  ],
                  "description": "Values to exclude from the list"
                }
              }
            }
          ]
        }
      }
    }
  }
}
