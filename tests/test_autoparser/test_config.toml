
name = "config file for testing"
description = "Autoparser config for generating CSV mappings and TOML"

# Used by parse_choices() to generate values mapping
# Using the delimiters below, we can parse this string:
#   oui=True, non=False
# to this TOML:
#  { "oui" = True, "non" = False}

# provide one, other or both of these
llm_provider = "openai"

choice_delimiter = ","
choice_delimiter_map = "="

# max number of references to use in the parser file
num_refs = 3

# maximum number of unique values a column can contain for them to be considered 'common'
# and which might need to be mapped in the parser. e.g. a column with only
# 'oui, non, inconnu' as unique values would be considered to have common values,
# while a column with 50 unique values (perhaps because they are dates, or IDs) would not.
# Maximum is 30% of the dataset length (relevant for small datasets to limit data leakage).
max_common_count = 8

# Optional:
# Frequency required for a value to be considered common. Max_common_count will act on
# the filtered 'common' list of values.
# Will default to 5% if the max_common_count is > 30% of the dataset.
# min_common_freq = 0.002

# Path to the target schemas, one per table
[schemas]
  animals = "tests/test_autoparser/schemas/animals.schema.json"

# Column mappings to standardise column names across data dictionaries
[column_mappings]
  source_field = "Field Name"
  source_description = "Description"
  source_type = "Field Type"
  common_values = "Common Values"
  choices = "Choices"
